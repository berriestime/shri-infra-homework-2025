name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Для полной истории коммитов
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Run linter and tests
        run: |
          npm ci
          npm run lint
          npm run test
          
      - name: Get release version
        id: version
        run: echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV
          
      - name: Create release branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'actions@github.com'
          git checkout -b releases/${{ env.RELEASE_VERSION }}
          git push origin releases/${{ env.RELEASE_VERSION }}
          
      - name: Validate Secret
        run: |
          if [ -z "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" ]; then
            echo "❌ ОШИБКА: Секрет YC_SERVICE_ACCOUNT_KEY пустой!"
            exit 1
          else
            echo "✅ Секрет существует (длина: ${#SECRET} символов)"
            echo "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" > key.json
            jq empty key.json || (echo "❌ Невалидный JSON"; exit 1)
          fi

      - name: Auth in Yandex Cloud  
        run: |
          # Установка YC CLI
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /home/runner/yandex-cloud -n
          export PATH=$PATH:/home/runner/yandex-cloud/bin
          
          # Проверка установки
          yc --version
          
          # Аутентификация
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
          yc config set service-account-key key.json
          yc container registry configure-docker
          rm -f key.json
          
      - name: Build and push Docker image
        run: |
          docker build . \
            -t cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }} \
            -t cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:latest
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:latest
          
      - name: Create version tag
        run: |
          git tag -a v${{ env.RELEASE_VERSION }} -m "Release ${{ env.RELEASE_VERSION }}"
          git push origin v${{ env.RELEASE_VERSION }}
          
      - name: Generate and commit changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            git log --oneline > CHANGELOG.tmp
          else
            git log $PREV_TAG..HEAD --oneline > CHANGELOG.tmp
          fi
          
          echo -e "# Version ${{ env.RELEASE_VERSION }}\n$(date +%Y-%m-%d)\n\n$(cat CHANGELOG.tmp)\n\n$(cat CHANGELOG.md)" > CHANGELOG.new
          mv CHANGELOG.new CHANGELOG.md
          rm CHANGELOG.tmp
          
          git add CHANGELOG.md
          git commit -m "chore(release): update changelog for v${{ env.RELEASE_VERSION }}"
          git push origin releases/${{ env.RELEASE_VERSION }}
          
      - name: Create release issue
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "")
          COMMITS=$(git log $PREV_TAG..HEAD --oneline | sed 's/^/- /')
          
          gh issue create \
            --title "Release v${{ env.RELEASE_VERSION }}" \
            --body "## Release Details
            - **Version**: ${{ env.RELEASE_VERSION }}
            - **Date**: $(date +%Y-%m-%d)
            - **Docker Image**: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}
            
            ### Commits since last release:
            $COMMITS
            
            ### Deployment Instructions
            1. Pull image: \`docker pull cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}\`
            2. Run container: \`docker run -d -p 3000:3000 cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ env.RELEASE_VERSION }}\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}