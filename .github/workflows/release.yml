name: Release

on:
  workflow_dispatch:

env:
  REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
  IMAGE_NAME: app
  VERSION: ${{ github.run_number }}

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - run: npm ci
      - run: npm run lint
      - run: npm run test

  release:
    needs: lint_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup YC CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /home/runner/yandex-cloud -n
          export PATH=$PATH:/home/runner/yandex-cloud/bin
          yc --version

      - name: Generate IAM Token
        id: auth
        env:
          YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$YC_SERVICE_ACCOUNT_KEY" > key.json
          YC_TOKEN=$(yc iam create-token --service-account-key-file key.json)
          echo "YC_TOKEN=$YC_TOKEN" >> $GITHUB_ENV
          echo "Token generated (first 10 chars): ${YC_TOKEN:0:10}..."  # Debug output
          rm -f key.json

      - name: Debug Token
        run: |
          echo "Token length: ${#YC_TOKEN}"  # Should be > 0
          if [ -z "$YC_TOKEN" ]; then
            echo "Error: YC_TOKEN is empty!"
            exit 1
          fi

      - name: Login to Container Registry
        run: |
          echo "$YC_TOKEN" | docker login \
            --username iam \
            --password-stdin \
            cr.yandex || {
              echo "Docker login failed!"
              exit 1
            }

      - name: Build and Push Docker Image
        run: |
          docker build . \
            -t cr.yandex/$REGISTRY_ID/$IMAGE_NAME:$VERSION \
            -t cr.yandex/$REGISTRY_ID/$IMAGE_NAME:latest
          
          docker push cr.yandex/$REGISTRY_ID/$IMAGE_NAME:$VERSION
          docker push cr.yandex/$REGISTRY_ID/$IMAGE_NAME:latest

      - name: Create Release Tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag -a v$VERSION -m "Release $VERSION"
          git push origin v$VERSION

      - name: Generate Changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            LOG=$(git log --oneline)
          else
            LOG=$(git log $PREV_TAG..HEAD --oneline)
          fi
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          {
            echo "# Version $VERSION ($(date +%Y-%m-%d))"
            echo ""
            echo "${{ steps.changelog.outputs.log }}"
            echo ""
            [ -f CHANGELOG.md ] && cat CHANGELOG.md
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          
          git add CHANGELOG.md
          git commit -m "Update changelog for v$VERSION"
          git push origin HEAD:main

      - name: Create Release Issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ env.VERSION }}`,
              body: `
              ## Deployment Info
              - **Image**: \`cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}\`
              - **Registry**: https://console.cloud.yandex.ru/folders/${{ secrets.YC_FOLDER_ID }}/container-registry/registries/${{ env.REGISTRY_ID }}
              
              ## Changelog
              \`\`\`
              ${{ steps.changelog.outputs.log }}
              \`\`\`
              `
            });